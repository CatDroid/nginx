
#user  nobody;
#工作进程数目 一般设置为cpu核数
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

#每个工作线程最大连接数
events {
    worker_connections  1024;
}

#针对 rtmp://
rtmp {
   server{
	listen 1935;

	ping 3m;
	ping_timeout 30s;
	timeout 5s;
	drop_idle_publisher 10s;

	application test {
		live on;
	}

	application rtmpapp {
		live on;
	}
	application hls {
		live on;
		hls on;
		hls_path /tmp/hls;
	}
   }
}

http {
    # 文件扩展名和文件类型映射 在mime.types中定义 扩展名/后缀 与 类型 转换关系
    # nginx 根据映射关系 设置http请求相应头的Content-Type值
    include       mime.types;
    
    # 如果映射表找不到 使用 default_type指定的
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

# server{}块 定义虚拟主机
    server {
	# 监听端口
        listen       80;
	# 监听域名
        server_name  localhost;

	#编码抓话映射文件 用于在输出内容到客户端时转码 koi8-r是斯拉夫文字8位元编码 俄语
	# koi-win  koi8-r -> window-1251 
	# koi-utf  kio8-r <> utf-8
	# win-utf  window-1251 <> utf-8
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

	# location{}块 为匹配的URI 的配置 URI中"/uri/" 
	# location / {} 匹配任何请求 因为所有的请求都从/开头
        location / {
	    # uri资源查找路径  这里的html是相对路径  也就是 <prefix>/html/
            root   html;
	    # 首页index文件的名字 可以配置多个 空格分开 初始<prefix>/html/index.html
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

	# 错误 500 502 503 504 重定向到 50x.html
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

	# nignx 配置Fastcgi解析时 会调用 fastcgi_params配置文件来传递服务器变量
	# 这样CGI中就可以获取这些变量的值
	# 默认传递变量 件 fastcgi_params文件 或者 fastcgi.conf
	# 传递服务器变量的配置文件还有 uwsig_params scgi_params等
	#
        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
